class Store {

	constructor(options) {
		this.subscriptions = {};
		this.data = options || {};
	}

	notify(key) {
		this.subscriptions[key].forEach(subscriber => subscriber.update(key, this.data[key]));
	}

	get(key) {
		return this.data[key];
	}

	set(key, value) {
		this.data[key] = value;
		this.notify(key);
	}

	subscribe(key, subscriber) {
		this.subscriptions[key] = this.subscriptions[key] || [];
		this.subscriptions[key].push(subscriber);
		return this.data[key];
	}

	unsubscribe(key, subscriber) {
		this.subscriptions[key] = this.subscriptions[key].filter(subscription => subscription !== subscriber);
	}

}

class Bonus {

  constructor(options) {
    Object.assign(this, options);

    if (this.type !== 'DOUBLE_SHOT') {
      this.img = new Image();
      this.img.src = this.getImgSrc();
    }
  }

  getImgSrc(type) {
    return {
      SHIELD: './shield.png',
      LIFE: './heart.png'
    }[this.type];
  }

  render(context) {
    context.fillStyle = `rgba(120, 255, 210, 0.1)`;
    context.strokeStyle = `rgb(120, 255, 210)`;
    context.lineWidth = 2;
    context.beginPath();
    context.arc(this.x, this.y, 18, 0, 2 * Math.PI);
    context.closePath();
    context.fill();
    context.stroke();

    if (this.type === 'DOUBLE_SHOT') {
      context.font = '8px "Press Start 2P"';
      context.fillStyle = 'rgb(120, 255, 210)';
      context.fillText('X2', Math.floor(this.x + 2), Math.floor(this.y) + 5);
    } else if (this.type === 'LIFE') {
      context.drawImage(this.img, this.x - 8, this.y - 8, 16, 16);
    } else if (this.type === 'SHIELD') {
      context.drawImage(this.img, this.x - 10, this.y - 10, 20, 20);
    }
  }
}

class Missile {

  constructor(options) {
    Object.assign(this, options);
  }

  update() {
    this.x = this.speed * Math.cos(this.angle) + this.x;
    this.y = this.speed * Math.sin(this.angle) + this.y;
  }

  render(context) {
    context.save();
    context.strokeStyle = "#FFFFFF";
    context.lineWidth = 2;
    context.translate(this.x, this.y);
    context.rotate(this.angle);

    context.beginPath();
    context.moveTo(0, 0);
    context.lineTo(-10, 0);
    context.closePath();

    context.stroke();
    context.restore();
  }
}

class User {

  constructor(options) {
    Object.assign(this, options);
  }

  get displayName() {
    return this.name ? this.name : this.id;
  }

  update() {
    this.x = this.speed * Math.cos(this.angle) + this.x;
    this.y = this.speed * Math.sin(this.angle) + this.y;
    if (this.x > 4000 || this.x < 0) this.angle = Math.PI - this.angle;
    if (this.y > 3000 || this.y < 0) this.angle = Math.PI * 2 - this.angle;
  }

  renderShield(context) {
    context.fillStyle = `rgba(120, 255, 210, ${this.shield / 1000})`;
    context.arc(this.x, this.y, 20, 0, 2 * Math.PI);
    context.fill();
  }

  renderLife(context) {
    context.fillStyle = 'rgb(120, 255, 210)';
    context.fillRect(this.x - 25, this.y + 20, this.life / 2, 1);
    context.fillStyle = 'rgba(255, 255, 255, 0.4)';
    context.fillRect(this.x - 25, this.y + 20, 50, 1);
  }

  renderName(context) {
    context.font = '8px "Press Start 2P"';
    context.fillStyle = 'rgba(120, 255, 210, 0.2)';
    context.textAlign = 'center';
    context.fillText(this.displayName.toUpperCase(), Math.floor(this.x), Math.floor(this.y) + 40);
  }

  render(context) {
    context.fillStyle = this.isMe ? '#FFFFFF' : '#C81E1E';

    context.save();
    context.translate(this.x, this.y);
    context.rotate(this.angle);
    context.beginPath();
    context.moveTo(-8, -6);
    context.lineTo(10, 0);
    context.lineTo(-8, 6);
    context.lineTo(-6, 2);
    context.lineTo(-6, -2);
    context.closePath();
    context.fill();
    context.restore();

    if (this.shield) this.renderShield(context);
    if (!this.shield) this.renderLife(context);

    this.renderName(context);
  }
}

class App {

	constructor(map) {
		this.container = document.body;
		this.data = {
			users: store.subscribe('users', this),
			missiles: store.subscribe('missiles', this)
		};
		this.startUpdateLoop();
		this.mount();
	}

	setup(map){
		this.canvas.setSize(map);
		this.canvas.show();
	}

	update(key, value) {
		this.data[key] = value;
	}

	startUpdateLoop() {
		setInterval(() => {
			this.data.users.forEach(user => user.update());
			this.data.missiles.forEach(missile => missile.update());
		}, 15);
	}

	mount() {
		this.canvas = new Canvas(this.container);
		this.leaderboard = new Leaderboard(this.container);
		this.header = new Header(this.container);
	}
}

class Canvas {

  constructor(container) {
    this.container = container;
    this.size = {};
    this.data = {
      users: store.subscribe('users', this),
      missiles: store.subscribe('missiles', this),
      bonus: store.subscribe('bonus', this)
    };
    this.mount();
    this.render();
  }

  setSize(size) {
    this.size = size;
    this.element.height = size.height;
    this.element.style.height = size.height;
    this.element.width = size.width;
    this.element.style.width = size.width;
  }

  show() {
    this.element.style.display = 'block';
  }

  hide() {
    this.element.style.display = 'none';
  }

  clear() {
    this.context.clearRect(0, 0, this.size.width, this.size.height);
  }

  followUser(user) {
    this.element.style.left = `${-user.x + window.innerWidth / 2}px`;
    this.element.style.top = `${-user.y + window.innerHeight / 2}px`;
  }

  update(key, value) {
    this.data[key] = value;
  }

  render() {
    this.clear();
    this.data.users.forEach(user => {
      user.render(this.context);
      if (user.isMe) this.followUser(user);
    });
    this.data.missiles.forEach(missile => missile.render(this.context));
    this.data.bonus.forEach(bonus => bonus.render(this.context));
    requestAnimationFrame(this.render.bind(this));
  }

  mount() {
    this.element = document.createElement('canvas');
    this.context = this.element.getContext('2d');
    this.container.appendChild(this.element);
  }

}

class Header {

	constructor(container) {
		this.container = container;
		this.data = {
			timer: store.subscribe('timer', this)
		};
		this.mount();
	}

	update(key, value) {
		this.data[key] = value;
		this.render();
	}

	render() {
		this.timer.textContent = this.data.timer;
	}

	mount() {
		this.element = document.createElement('header');
		this.timer = document.createElement('div');
		this.timer.id = 'timer';
		this.container.appendChild(this.element);
		this.element.appendChild(this.timer);
	}

}

class Leaderboard {

	constructor(container) {
		this.container = container;
		this.data = {
			users: store.subscribe('users', this),
			total: null
		};
		this.mount();
	}

	getListItem(user) {
		const li = document.createElement('li');
		li.innerHTML = `${user.displayName}: ${user.score}`;
		if (user.isMe) li.className = 'me';
		return li;
	}

	update(key, value) {
		this.data[key] = value;
		const total = this.data.users.reduce((total, user) => total + user.score, 0);
		if (total !== this.data.total) {
			this.render();
			this.data.total = total;
		}
	}

	render() {
		this.element.innerHTML = '';
		this.data.users.sort((a, b) => b.score - a.score).forEach(user => {
			this.element.appendChild(this.getListItem(user));
		});
	}

	mount(){
		this.element = document.createElement('ul');
		this.element.id = 'leaderboard';
		this.container.appendChild(this.element);
	}

}

const name = prompt("Please enter your name", undefined);
const HOST = location.origin.replace('http', 'ws') + (name ? `?name=${name.substring(0, 10)}`: '');
const socket = new WebSocket(HOST);
const store = new Store({users: [], missiles: [], bonus: [], timer: ''});
const app = new App();

socket.onopen = () => console.log( 'open' );

socket.onmessage = (event) => {
	event = JSON.parse(event.data);

	if (event.name === 'game_setup') {
		app.setup(event.data);
	} else if (event.name === 'game_update') {
    store.set('users', event.data.users.map(user => new User(user)));
    store.set('missiles', event.data.missiles.map(missile => new Missile(missile)));
    store.set('bonus', event.data.bonus.map(bonus => new Bonus(bonus)));
    store.set('timer', event.data.time);
		if (event.data.status === 'finished') app.canvas.hide();
	}
};

window.addEventListener('beforeunload', () => {
	socket.close();
});

const controller = {
	left: false,
	top: false,
	right: false,
  bottom: false,
	shoot: false
};

document.addEventListener('keydown', event => {
	if (event.keyCode === 37 && !controller.left) controller.left = true;
	else if (event.keyCode === 38 && !controller.top) controller.top = true;
	else if (event.keyCode === 39 && !controller.right) controller.right = true;
	else if (event.keyCode === 40 && !controller.bottom) controller.bottom = true;
	else if (event.keyCode === 32 && !controller.shoot) controller.shoot = true;
	else return;
	socket.send(JSON.stringify(controller));
});

document.addEventListener('keyup', event => {
	if (event.keyCode === 37) controller.left = false;
	else if (event.keyCode === 38) controller.top = false;
	else if (event.keyCode === 39) controller.right = false;
	else if (event.keyCode === 40) controller.bottom = false;
	else if (event.keyCode === 32) controller.shoot = false;
  else return;
	socket.send(JSON.stringify(controller));
});
